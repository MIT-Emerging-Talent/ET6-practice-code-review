name: ET CI Checks

on: [push, pull_request, workflow_dispatch]

jobs:
  ls_linting:
    runs-on: ubuntu-latest
    steps:  
      - uses: actions/checkout@v4
      - uses: ls-lint/action@v2.2.3

  md_formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
          files: .
          config_file: .markdownlint.yml

  py_formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Python - Check Formatting
        uses: astral-sh/ruff-action@v1
        with:
          args: "format --check"

  py_linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Passing ruff linting is required
      - name: Python - Check Linting - ruff
        uses: astral-sh/ruff-action@v1

      # Passing pylint is not required - discuss errors in code review
      - name: Python version
        run: python --version
        shell: bash
        if: always()
      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint
        shell: bash
      - name: Python - Check Linting - pylint
        run: |
          pylint solutions tests || echo '::warning title=Pylint Error(s)::Discuss solutions and trade-offs in code review.'
        shell: bash

  py_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash
      
      - name: Check for test files
        id: check_tests
        run: |
          test_files=$(find ./solutions/tests -type f -name "test_*.py")
          if [ -n "$test_files" ]; then
            echo "Found test files:"
            echo "$test_files"
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "No test files found matching pattern ./solutions/tests/test_*.py"
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Run Tests
        if: steps.check_tests.outputs.has_tests == 'true'
        run: python -m unittest discover -s solutions/tests -p "test_*.py"
        shell: bash
