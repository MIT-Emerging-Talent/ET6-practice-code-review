# Name of the CI workflow
name: ET CI Checks

# Specifies the events that trigger the workflow
on: 
  - push           # Runs when code is pushed to the repository
  - pull_request   # Runs when a pull request is created or updated
  - workflow_dispatch # Allows manual triggering of the workflow

# Defines the jobs in this CI workflow
jobs:
  # Job to check code with `ls-lint` for directory and file naming conventions
  ls_linting:
    runs-on: ubuntu-latest # Specifies the OS environment
    steps:
      - uses: actions/checkout@v4 # Checks out the code from the repository
      - uses: ls-lint/action@v2.2.3 # Runs the ls-lint tool for linting directory and file names

  # Job to check and enforce Markdown formatting standards
  md_formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checks out the code from the repository
      - uses: nosborn/github-action-markdown-cli@v3.3.0 # Uses a markdown formatting tool
        with:
          files: .               # Specifies the directory to lint
          config_file: .markdownlint.yml # Configuration file for markdown linting

  # Job to check Python code formatting
  py_formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checks out the code from the repository
      - name: Python - Check Formatting
        uses: astral-sh/ruff-action@v1 # Uses `ruff` to check Python code formatting
        with:
          args: "format --check" # Runs `ruff` with the `format --check` argument

  # Job to lint Python code for adherence to style standards
  py_linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checks out the code from the repository

      # Step to check Python linting using `ruff`
      - name: Python - Check Linting - ruff
        uses: astral-sh/ruff-action@v1

      # Additional step to check Python linting using `pylint` (not required to pass)
      - name: python version
        run: python --version # Displays the Python version used in the environment
        shell: bash
        if: always() # Ensures this step always runs

      - name: install pylint
        run: |
          python -m pip install --upgrade pip # Upgrades pip
          pip install pylint # Installs pylint
        shell: bash

      - name: Python - Check Linting - pylint
        run: |
          pylint solutions tests || echo '::warning title=Pylint Error(s)::Discuss solutions and trade-offs in code review.'
        # Runs pylint on the `solutions` and `tests` directories, allows errors, and provides a warning for code review
        shell: bash

  # Job to run Python unit tests
  py_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Checks out the code from the repository
      - name: python version
        run: python --version # Displays the Python version used in the environment
        shell: bash
      - name: Python - Run Tests
        run: python -m unittest # Runs Python unit tests using the `unittest` module
        shell: bash
